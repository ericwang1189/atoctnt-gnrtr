import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import os
import json
import requests
import random

# Load API key from Streamlit secrets or .env file
try:
    # Khi deploy l√™n Streamlit Cloud, s·ª≠ d·ª•ng secrets
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except:
    # Khi ch·∫°y local, s·ª≠ d·ª•ng .env file
    load_dotenv()
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    st.error("GEMINI_API_KEY not found. Please set it up in Streamlit secrets or .env file.")
    st.stop()

genai.configure(api_key=GEMINI_API_KEY)

# Initialize the Generative Model
model = genai.GenerativeModel('gemini-1.5-flash')

# Streamlit App Title
st.title("üöó AutoContent Generator üèéÔ∏è")
st.write("T·∫°o n·ªôi dung ƒë·ªôc ƒë√°o v·ªÅ xe h∆°i (ho·∫∑c m√¥ h√¨nh xe) v·ªõi Gemini AI!")

# User Input for Content Style
content_style = st.selectbox(
    "Ch·ªçn phong c√°ch n·ªôi dung b·∫°n mu·ªën:",
    ("Short Joke", "Fact", "Fun", "Dark joke")
)

# Custom Prompt Input
st.subheader("üéØ T√πy ch·ªânh Prompt")
default_prompt = "You are an expert in automobiles and scale model cars, with extensive knowledge and professional-level insight across both industries."
custom_prompt = st.text_area(
    "Nh·∫≠p prompt t√πy ch·ªânh c·ªßa b·∫°n:",
    value=default_prompt,
    height=100,
    help="ƒê√¢y l√† ph·∫ßn m√¥ t·∫£ vai tr√≤ c·ªßa AI. B·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªÉ t·∫°o ra n·ªôi dung theo √Ω mu·ªën.",
    placeholder="V√≠ d·ª•: You are a professional car reviewer with 20 years of experience..."
)

# Tone Selection
st.subheader("üé® Ch·ªçn Tone")
tone_options = {
    "G·∫ßn g≈©i": "Casual, funny, relatable",
    "Th√¥ng minh": "Smart, upbeat, shareable",
    "D·ª©t kho√°t": "Bold, sharp, confident",
    "M·∫°nh m·∫Ω": "Direct, raw, unapologetic"
}
selected_tone = st.selectbox(
    "Ch·ªçn tone cho n·ªôi dung:",
    options=list(tone_options.keys()),
    help="Tone n√†y s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch vi·∫øt v√† c·∫£m x√∫c c·ªßa n·ªôi dung"
)
tone_description = tone_options[selected_tone]

# Generate random image function
def get_random_car_image():
    """T·∫°o URL h√¨nh ·∫£nh ng·∫´u nhi√™n t·ª´ c√°c ngu·ªìn ·ªïn ƒë·ªãnh"""
    # S·ª≠ d·ª•ng Unsplash API ƒë·ªÉ l·∫•y h√¨nh ·∫£nh xe h∆°i th·ª±c t·∫ø
    car_keywords = ["sports-car", "luxury-car", "vintage-car", "racing-car", "electric-car", "suv", "sedan", "convertible"]
    selected_keyword = random.choice(car_keywords)
    
    sources = [
        f"https://source.unsplash.com/600x400/?car,{selected_keyword}",
        f"https://source.unsplash.com/600x400/?automobile,{selected_keyword}",
        f"https://source.unsplash.com/600x400/?vehicle,{selected_keyword}",
        f"https://source.unsplash.com/600x400/?automotive,{selected_keyword}",
        # Backup options
        f"https://picsum.photos/600/400?random={random.randint(1, 1000)}",
        f"https://via.placeholder.com/600x400/2C3E50/FFFFFF?text=üöó+Car+Content"
    ]
    return random.choice(sources)

# Generate Button
if st.button("T·∫°o N·ªôi Dung"):
    with st.spinner("ƒêang t·∫°o n·ªôi dung, vui l√≤ng ch·ªù..."):
        # Generate random image URL
        random_image = get_random_car_image()
        
        # S·ª≠ d·ª•ng custom prompt v√† tone thay v√¨ prompt c·ªë ƒë·ªãnh
        prompt = f"""
        {custom_prompt}
        Create a piece of content in the following structure (JSON format):
        {{
          "title": "...",
          "content": "...",
          "hashtag": "#car #fun",
          "image_url": "{random_image}"
        }}
        Topic context: Related to either real cars or 1:64 scale model cars.
        User-selected style: {content_style}
        User-selected tone: {selected_tone} ({tone_description})
        Language: Vietnamese
        Length: Max 300 words
        Ensure the output is valid JSON. Use the provided image_url exactly as given.
        """
        
        try:
            response = model.generate_content(prompt)
            # Attempt to parse the JSON output from the model
            text_response = response.text
            
            # Find the first and last curly braces to extract the JSON part
            start_json = text_response.find('{')
            end_json = text_response.rfind('}') + 1
            
            if start_json != -1 and end_json != -1:
                json_string = text_response[start_json:end_json]
                try:
                    content_data = json.loads(json_string)
                except json.JSONDecodeError:
                    # Fallback if JSON parsing fails
                    content_data = {
                        "title": "N·ªôi dung ƒë∆∞·ª£c t·∫°o",
                        "content": text_response,
                        "hashtag": "#car #fun #auto",
                        "image_url": random_image
                    }
                
                # Display content
                st.subheader(content_data.get("title", "Ti√™u ƒë·ªÅ kh√¥ng c√≥"))
                st.write(content_data.get("content", "N·ªôi dung kh√¥ng c√≥"))
                st.write(f"**Hashtags:** {content_data.get('hashtag', '')}")
                
                # Display image with better error handling
                image_url = content_data.get("image_url", random_image)
                if image_url:
                    try:
                        # S·ª≠ d·ª•ng st.image v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
                        st.image(image_url, caption="·∫¢nh minh h·ªça", use_container_width=True)
                    except Exception as img_error:
                        st.warning(f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL: {image_url}")
                        # Fallback v·ªõi placeholder t·ªët h∆°n
                        fallback_url = "https://via.placeholder.com/600x400/2C3E50/FFFFFF?text=üöó+Car+Content"
                        try:
                            st.image(fallback_url, caption="·∫¢nh minh h·ªça (d·ª± ph√≤ng)", use_container_width=True)
                        except:
                            st.info("Kh√¥ng th·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.")
                else:
                    st.info("Kh√¥ng c√≥ URL h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p.")
                    
            else:
                st.error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ Gemini th√†nh ƒë·ªãnh d·∫°ng JSON. Vui l√≤ng th·ª≠ l·∫°i.")
                st.write("Ph·∫£n h·ªìi g·ªëc:", text_response)
                
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o n·ªôi dung: {e}")
            st.info("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra API Key v√† k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.")

# Add some stats or info
st.markdown("---")
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("Phong c√°ch", content_style)
with col2:
    st.metric("Tone", selected_tone)
with col3:
    st.metric("Ng√¥n ng·ªØ", "Ti·∫øng Vi·ªát")
with col4:
    st.metric("AI Model", "Gemini 1.5 Flash")

# Footer
st.markdown("---")
st.markdown("Made with ‚ù§Ô∏è using Streamlit and Google Gemini AI")
st.markdown("üìß Feedback: [GitHub Issues](https://github.com/ericwang1189/autocontent-generator/issues)")
