import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import os
import json
import requests

# Load API key from Streamlit secrets or .env file
try:
    # Khi deploy l√™n Streamlit Cloud, s·ª≠ d·ª•ng secrets
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
except:
    # Khi ch·∫°y local, s·ª≠ d·ª•ng .env file
    load_dotenv()
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    st.error("GEMINI_API_KEY not found. Please set it up in Streamlit secrets or .env file.")
    st.stop()

genai.configure(api_key=GEMINI_API_KEY)

# Initialize the Generative Model
model = genai.GenerativeModel('gemini-1.5-flash')

# Streamlit App Title
st.title("üöó AutoContent Generator üèéÔ∏è")
st.write("T·∫°o n·ªôi dung ƒë·ªôc ƒë√°o v·ªÅ xe h∆°i (ho·∫∑c m√¥ h√¨nh xe) v·ªõi Gemini AI!")

# User Input for Content Style
content_style = st.selectbox(
    "Ch·ªçn phong c√°ch n·ªôi dung b·∫°n mu·ªën:",
    ("Short Joke", "Fact", "Fun", "Dark joke")
)

# Generate Button
if st.button("T·∫°o N·ªôi Dung"):
    with st.spinner("ƒêang t·∫°o n·ªôi dung, vui l√≤ng ch·ªù..."):
        prompt = f"""
        You are an AI content generator specialized in car-related humor and infotainment.
        Create a piece of content in the following structure (JSON format):
        {{
          "title": "...",
          "content": "...",
          "hashtag": "#car #fun",
          "image_url": "https://..."
        }}
        Topic context: Related to either real cars or 1:64 scale model cars.
        User-selected style: {content_style}
        Language: Vietnamese
        Tone: Witty, engaging, internet-friendly
        Length: Max 300 words
        Ensure the output is valid JSON. For 'image_url', use a URL from Unsplash (e.g., https://source.unsplash.com/600x400/?car,humor) or placeholder.com that relates to the content.
        """
        
        try:
            response = model.generate_content(prompt)
            # Attempt to parse the JSON output from the model
            text_response = response.text
            
            # Find the first and last curly braces to extract the JSON part
            start_json = text_response.find('{')
            end_json = text_response.rfind('}') + 1
            
            if start_json != -1 and end_json != -1:
                json_string = text_response[start_json:end_json]
                content_data = json.loads(json_string)
                
                st.subheader(content_data.get("title", "Ti√™u ƒë·ªÅ kh√¥ng c√≥"))
                st.write(content_data.get("content", "N·ªôi dung kh√¥ng c√≥"))
                st.write(f"**Hashtags:** {content_data.get('hashtag', '')}")
                
                image_url = content_data.get("image_url")
                if image_url:
                    try:
                        st.image(image_url, caption="·∫¢nh minh h·ªça", use_container_width=True)
                    except:
                        st.info("Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ URL ƒë∆∞·ª£c cung c·∫•p.")
                else:
                    st.info("Kh√¥ng c√≥ URL h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p.")
            else:
                st.error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ Gemini th√†nh ƒë·ªãnh d·∫°ng JSON. Vui l√≤ng th·ª≠ l·∫°i.")
                st.write("Ph·∫£n h·ªìi g·ªëc:", text_response)
                
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o n·ªôi dung: {e}")
            st.info("Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra API Key v√† k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.")

# Footer
st.markdown("---")
st.markdown("Made with ‚ù§Ô∏è using Streamlit and Google Gemini AI")